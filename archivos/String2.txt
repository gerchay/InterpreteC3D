call MAIN();
void MAIN(){
	Stack[0] = 0; //Valor de retorno
	Stack[1] = 0; //Entorno actual

	T0 = h;
	Heap[h] = 104;//h
	h = h + 1;
	Heap[h] = 111;//o 
	h = h + 1;
	Heap[h] = 108;//l
	h = h + 1;
	Heap[h] = 97;//a
	h = h + 1;
	Heap[h] = 32;// 
	h = h + 1;
	Heap[h] = 109;//m
	h = h + 1;
	Heap[h] = 117;//u
	h = h + 1;
	Heap[h] = 110;//n
	h = h + 1;
	Heap[h] = 100;//d
	h = h + 1;
	Heap[h] = 111;//o
	h = h + 1;
	Heap[h] = 36;//$
	h = h + 1;
	Stack[2] = T0;

	T0 = h;
	Heap[h] = 78;
	h = h + 1;
	Heap[h] = 117;
	h = h + 1;
	Heap[h] = 101;
	h = h + 1;
	Heap[h] = 118;
	h = h + 1;
	Heap[h] = 97;
	h = h + 1;
	Heap[h] = 32;
	h = h + 1;
	Heap[h] = 99;
	h = h + 1;
	Heap[h] = 97;
	h = h + 1;
	Heap[h] = 100;
	h = h + 1;
	Heap[h] = 101;
	h = h + 1;
	Heap[h] = 110;
	h = h + 1;
	Heap[h] = 97;
	h = h + 1;
	Heap[h] = 36;
	h = h + 1;
	Stack[2] = T0;
	
	T0 = h;
	Heap[h] = 79;
	h = h + 1;
	Heap[h] = 116;
	h = h + 1;
	Heap[h] = 114;
	h = h + 1;
	Heap[h] = 97;
	h = h + 1;
	Heap[h] = 32;
	h = h + 1;
	Heap[h] = 99;
	h = h + 1;
	Heap[h] = 97;
	h = h + 1;
	Heap[h] = 100;
	h = h + 1;
	Heap[h] = 101;
	h = h + 1;
	Heap[h] = 110;
	h = h + 1;
	Heap[h] = 97;
	h = h + 1;
	Heap[h] = 36;
	h = h + 1;
	Stack[2] = T0;
	
	T0 = Stack[2]; //Variable cadena
	T1 = Stack[2]; //Variable cadena
	T3 = p + 3; //Cambio virtual de ambito

	T4 = T3 + 1;
	Stack[T4] = T0; //Pasar por parametro primer variable

	T4 = T3 + 2;
	Stack[T4] = T1; //Pasar por parametro segunda variable

	p = p + 3; //Cambio real de ambito
	call Native_Concat_String_String();
	T5 = p + 0; //Posicion del return
	T2 = Stack[T5]; //Asignando el return a la variable 
	p = p - 3; //Regresando al ambito anterior

	Stack[2] = T2;
	T0 = Stack[2];
	T1 = p + 3;
	Stack[T1] = T0;
	p = p + 3;
	call Native_PrintString();
	p = p - 3;
	print(%c,10);
	L0:
}
void Native_Concat_String_String(){
	T6 = h;
	T7 = p + 1;
	T8 = Stack[T7];
	T9 = Heap[T8];
	L1:
	if (T9 == 36) goto L2;
	Heap[h] = T9;
	h = h + 1;
	T8 = T8 + 1;
	T9 = Heap[T8];
	goto L1;
	L2:
	T7 = p + 2;
	T8 = Stack[T7];
	T9 = Heap[T8];
	L3:
	if (T9 == 36) goto L4;
	Heap[h] = T9;
	h = h + 1;
	T8 = T8 + 1;
	T9 = Heap[T8];
	goto L3;
	L4:
	Heap[h] = 36;
	h = h + 1;
	Stack[p] = T6;
}
void Native_PrintString(){
	T6 = p + 0;
	T7 = Stack[T6];
	if (T7 != -1) goto L17;
	print(%c,78);
	print(%c,73);
	print(%c,76);
	goto L19;
	L17:
	T8 = Heap[T7];
	L18:
	if (T8 == 36) goto L19;
	print(%c,T8);
	T7 = T7 + 1;
	T8 = Heap[T7];
	goto L18;
	L19:
}
void Native_Malloc(){
	T0 = p + 2;
	T1 = Stack[T0];
	T0 = h;
	L62:
	if (T1 <= 0) goto L63;
	h = h + 1;
	T1 = T1 - 1;
	goto L62;
	L63:
	Stack[p] = T0;
}